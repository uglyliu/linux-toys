#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
Usage: klg -n <namespace> -p <pod> [-c <container>] [-f] [--no <number>] [-s]

  -n, --namespace <namespace>    assign namespace
  -p, --pod <pod pattern>        assign pod pattern
  -c, --container <container>    assign container name
  -f, --follow                   output log as they're appended
  -s, --show                     show kubectl command without executing
  --no <number>                  output last n lines of log
"""

# This is a utility script for kubernetes, authored by Zhu Li (zhuli19901106@gmail.com).
# I wrote this script to type less on k8s clusters.
# It was adapted from my repo: https://github.com/zhuli19901106/linux-toys/blob/master/bin/kbexec .
# Typing commands with kubectl can be tiresome due to its versatility.
# If you want to refine this script, just don't try to cover the myriad of options that kubectl provides.
# Because the combination of arguments can be exhausting.

import docopt
import logging
import os
import sys

K_COMMAND = 'k'
logger = logging.getLogger(__name__)

def shell_exec(cmd):
    with os.popen(cmd) as f:
        s = f.read()
        a = s.strip().split('\n')
    return a

def get_item_name(namespace, category, pattern):
    cmd = """{} -n {} get {} | grep {} | awk -F" " '{{print $1}}'""".format(K_COMMAND, namespace, category, pattern)
    output = shell_exec(cmd)
    return output[0]

def get_termsize():
    output = shell_exec('tput lines')
    lines = int(output[0])
    output = shell_exec('tput cols')
    columns = int(output[0])
    return lines, columns

def generate_command(args):
    LINES, COLUMNS = get_termsize()
    cmd = 'echo "hello world"'
    is_interactive = False

    namespace = 'default'
    if args['--namespace']:
        namespace = args['--namespace']

    if args['--container']:
        container = args['--container']
        container_opt = ' -c {}'.format(container)
    else:
        container_opt = ''

    category = 'po'
    pattern = args['--pod']
    item = get_item_name(namespace, category, pattern)
    log_opt = '-f'
    if args['--follow']:
        log_opt = '-f'
    elif args['--no']:
        log_num = args['--no']
        log_opt = '--tail {}'.format(log_num)
    cmd = '{} -n {} logs {} {}{}'.format(K_COMMAND, namespace, log_opt, item, container_opt)
    is_interactive = True
    return cmd, is_interactive

def main():
    args = docopt.docopt(__doc__)
    cmd, is_interactive = generate_command(args)

    print cmd
    if args['--show']:
        return

    if is_interactive:
        os.system(cmd)
    else:
        output = shell_exec(cmd)
        print '\n'.join(output)

if __name__ == '__main__':
    main()

