#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
Usage: kis [-n <namespace>] [--ds] [-w] [-s]
       kis [-n <namespace>] -p <pod> [-y] [-e] [--ds] [-w] [-s]
       kis [-n <namespace>] -m <configmap> [-y] [-e] [--ds] [-w] [-s]
       kis [-n <namespace>] -d <deploy> [-y] [-e] [--ds] [-w] [-s]
       kis [-n <namespace>] -g <get> [--ds] [-w] [-s]

  -n, --namespace <namespace>    assign namespace, can override p command
  -p, --pod <pod pattern>        assign pod piattern
  -m, --map <config map pattern> assign config map pattern
  -d, --deploy <deploy pattern>  assign deploy pattern
  -y, --yaml                     get yaml-formatted output
  -e, --edit                     edit yaml
  -g, --get                      list items
  -w, --wide                     list details
  -s, --show                     show kubectl command without executing
  --ds                           describe item
"""

# This is a utility script for kubernetes, authored by Zhu Li (zhuli19901106@gmail.com).
# I wrote this script to type less on k8s clusters.
# It was adapted from my repo: https://github.com/zhuli19901106/linux-toys/blob/master/bin/kbexec .
# Typing commands with kubectl can be tiresome due to its versatility.
# If you want to refine this script, just don't try to cover the myriad of options that kubectl provides.
# Because the combination of arguments can be exhausting.

import docopt
import logging
import os
import sys

K_COMMAND = 'k'
logger = logging.getLogger(__name__)

def shell_exec(cmd):
    with os.popen(cmd) as f:
        s = f.read()
        a = s.strip().split('\n')
    return a

def get_item_name(namespace, category, pattern):
    cmd = """{} -n {} get {} | grep {} | awk -F" " '{{print $1}}'""".format(K_COMMAND, namespace, category, pattern)
    output = shell_exec(cmd)
    return output[0]

def get_termsize():
    output = shell_exec('tput lines')
    lines = int(output[0])
    output = shell_exec('tput cols')
    columns = int(output[0])
    return lines, columns

def generate_command(args):
    LINES, COLUMNS = get_termsize()
    cmd = 'echo "hello world"'
    is_interactive = False

    namespace = 'default'
    if args['--namespace']:
        namespace = args['--namespace']

    if args['--wide']:
        is_wide = True
    else:
        is_wide = False
    wide_str = ' -o wide' if is_wide else ''

    if args['--get']:
        category = args['<get>']
        if args['--ds']:
            cmd = '{} -n {} describe {}'.format(K_COMMAND, namespace, category)
        else:
            cmd = '{} -n {} get {}{}'.format(K_COMMAND, namespace, category, wide_str)
        return cmd, is_interactive

    if args['--deploy'] or args['--map'] or args['--pod']:
        category = 'po'
        pattern = ''
        if args['--deploy']:
            category = 'deploy'
            pattern = args['--deploy']
        elif args['--map']:
            category = 'cm'
            pattern = args['--map']
        elif args['--pod']:
            category = 'po'
            pattern = args['--pod']
        pattern = pattern if pattern else ''

        item = get_item_name(namespace, category, pattern)
        if args['--ds']:
            cmd = '{} -n {} describe {} {}'.format(K_COMMAND, namespace, category, item)
        elif args['--yaml']:
            if args['--edit']:
                cmd = '{} -n {} edit {} {}'.format(K_COMMAND, namespace, category, item)
                is_interactive = True
            else:
                cmd = '{} -n {} get {} {} -o yaml'.format(K_COMMAND, namespace, category, item)
        else:
            cmd = '{} -n {} get {} {}{}'.format(K_COMMAND, namespace, category, item, wide_str)
        return cmd, is_interactive

    if args['--ds']:
        cmd = '{} describe ns {}'.format(K_COMMAND, namespace)
    else:
        cmd = '{} get ns{}'.format(K_COMMAND, wide_str)
    return cmd, is_interactive

def main():
    args = docopt.docopt(__doc__)
    cmd, is_interactive = generate_command(args)

    print cmd
    if args['--show']:
        return

    if is_interactive:
        os.system(cmd)
    else:
        output = shell_exec(cmd)
        print '\n'.join(output)

if __name__ == '__main__':
    main()

